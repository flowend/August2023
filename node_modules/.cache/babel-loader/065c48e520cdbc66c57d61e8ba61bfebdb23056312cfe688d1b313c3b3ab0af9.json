{"ast":null,"code":"import _regeneratorRuntime from \"/Users/flo/Documents/Documents - Flo\\u2019s MacBook Pro/Proiecte/new-learnings/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/flo/Documents/Documents - Flo\\u2019s MacBook Pro/Proiecte/new-learnings/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _createClass from \"/Users/flo/Documents/Documents - Flo\\u2019s MacBook Pro/Proiecte/new-learnings/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"/Users/flo/Documents/Documents - Flo\\u2019s MacBook Pro/Proiecte/new-learnings/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"/Users/flo/Documents/Documents - Flo\\u2019s MacBook Pro/Proiecte/new-learnings/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/Users/flo/Documents/Documents - Flo\\u2019s MacBook Pro/Proiecte/new-learnings/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"/Users/flo/Documents/Documents - Flo\\u2019s MacBook Pro/Proiecte/new-learnings/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\n/**\n * @experimental\n */\nexport var internals = {\n  /**\n   * @experimental\n   */\n  debug: !!(globalThis && globalThis.localStorage && globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true')\n};\nexport var NavigatorLockAcquireTimeoutError = /*#__PURE__*/function (_Error) {\n  _inherits(NavigatorLockAcquireTimeoutError, _Error);\n  var _super = _createSuper(NavigatorLockAcquireTimeoutError);\n  function NavigatorLockAcquireTimeoutError(message) {\n    var _this;\n    _classCallCheck(this, NavigatorLockAcquireTimeoutError);\n    _this = _super.call(this, message);\n    _this.isAcquireTimeout = true;\n    return _this;\n  }\n  return _createClass(NavigatorLockAcquireTimeoutError);\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @experimental\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport function navigatorLock(_x, _x2, _x3) {\n  return _navigatorLock.apply(this, arguments);\n}\nfunction _navigatorLock() {\n  _navigatorLock = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(name, acquireTimeout, fn) {\n    var beginOperation, rejectOperation, beginOperationPromise, result, abortController;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          if (internals.debug) {\n            console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout);\n          }\n          beginOperation = null;\n          rejectOperation = null;\n          beginOperationPromise = new Promise(function (accept, reject) {\n            beginOperation = accept;\n            rejectOperation = reject;\n          }); // this lets us preserve stack traces over the operation, which the\n          // navigator.locks.request function does not preserve well still\n          result = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n            return _regeneratorRuntime().wrap(function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return beginOperationPromise;\n                case 2:\n                  if (internals.debug) {\n                    console.log('@supabase/gotrue-js: navigatorLock: operation start');\n                  }\n                  _context.prev = 3;\n                  _context.next = 6;\n                  return fn();\n                case 6:\n                  return _context.abrupt(\"return\", _context.sent);\n                case 7:\n                  _context.prev = 7;\n                  if (internals.debug) {\n                    console.log('@supabase/gotrue-js: navigatorLock: operation end');\n                  }\n                  return _context.finish(7);\n                case 10:\n                case \"end\":\n                  return _context.stop();\n              }\n            }, _callee, null, [[3,, 7, 10]]);\n          }))();\n          abortController = new globalThis.AbortController();\n          if (acquireTimeout > 0) {\n            setTimeout(function () {\n              beginOperation = null;\n              abortController.abort();\n              if (rejectOperation) {\n                if (internals.debug) {\n                  console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name);\n                }\n                if (rejectOperation) {\n                  rejectOperation(new NavigatorLockAcquireTimeoutError(\"Acquiring an exclusive Navigator LockManager lock \\\"\".concat(name, \"\\\" timed out after \").concat(acquireTimeout, \"ms\")));\n                }\n                beginOperation = null;\n                rejectOperation = null;\n              }\n            }, acquireTimeout);\n          }\n          _context3.next = 9;\n          return globalThis.navigator.locks.request(name, {\n            mode: 'exclusive',\n            ifAvailable: acquireTimeout === 0,\n            signal: abortController.signal\n          }, /*#__PURE__*/function () {\n            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(lock) {\n              var timeout;\n              return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n                while (1) switch (_context2.prev = _context2.next) {\n                  case 0:\n                    if (!lock) {\n                      _context2.next = 18;\n                      break;\n                    }\n                    if (internals.debug) {\n                      console.log('@supabase/gotrue-js: navigatorLock acquired', name);\n                    }\n                    _context2.prev = 2;\n                    if (!beginOperation) {\n                      _context2.next = 9;\n                      break;\n                    }\n                    beginOperation();\n                    beginOperation = null;\n                    rejectOperation = null;\n                    _context2.next = 9;\n                    return result;\n                  case 9:\n                    _context2.next = 13;\n                    break;\n                  case 11:\n                    _context2.prev = 11;\n                    _context2.t0 = _context2[\"catch\"](2);\n                  case 13:\n                    _context2.prev = 13;\n                    if (internals.debug) {\n                      console.log('@supabase/gotrue-js: navigatorLock released', name);\n                    }\n                    return _context2.finish(13);\n                  case 16:\n                    _context2.next = 24;\n                    break;\n                  case 18:\n                    if (internals.debug) {\n                      console.log('@supabase/gotrue-js: navigatorLock not immediately available', name);\n                    }\n                    // no lock was available because acquireTimeout === 0\n                    timeout = new Error(\"Acquiring an exclusive Navigator LockManager lock \\\"\".concat(name, \"\\\" immediately failed\"));\n                    timeout.isAcquireTimeout = true;\n                    if (rejectOperation) {\n                      rejectOperation(new NavigatorLockAcquireTimeoutError(\"Acquiring an exclusive Navigator LockManager lock \\\"\".concat(name, \"\\\" immediately failed\")));\n                    }\n                    beginOperation = null;\n                    rejectOperation = null;\n                  case 24:\n                  case \"end\":\n                    return _context2.stop();\n                }\n              }, _callee2, null, [[2, 11, 13, 16]]);\n            }));\n            return function (_x4) {\n              return _ref2.apply(this, arguments);\n            };\n          }());\n        case 9:\n          _context3.next = 11;\n          return result;\n        case 11:\n          return _context3.abrupt(\"return\", _context3.sent);\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n  return _navigatorLock.apply(this, arguments);\n}","map":{"version":3,"names":["internals","debug","globalThis","localStorage","getItem","NavigatorLockAcquireTimeoutError","_Error","_inherits","_super","_createSuper","message","_this","_classCallCheck","call","isAcquireTimeout","_createClass","_wrapNativeSuper","Error","navigatorLock","_x","_x2","_x3","_navigatorLock","apply","arguments","_asyncToGenerator","_regeneratorRuntime","mark","_callee3","name","acquireTimeout","fn","beginOperation","rejectOperation","beginOperationPromise","result","abortController","wrap","_callee3$","_context3","prev","next","console","log","Promise","accept","reject","_callee","_callee$","_context","abrupt","sent","finish","stop","AbortController","setTimeout","abort","concat","navigator","locks","request","mode","ifAvailable","signal","_ref2","_callee2","lock","timeout","_callee2$","_context2","t0","_x4"],"sources":["/Users/flo/Documents/Documents - Flo’s MacBook Pro/Proiecte/new-learnings/node_modules/@supabase/gotrue-js/src/lib/locks.ts"],"sourcesContent":["/**\n * @experimental\n */\nexport const internals = {\n  /**\n   * @experimental\n   */\n  debug: !!(\n    globalThis &&\n    globalThis.localStorage &&\n    globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true'\n  ),\n}\n\nexport class NavigatorLockAcquireTimeoutError extends Error {\n  public readonly isAcquireTimeout = true\n\n  constructor(message: string) {\n    super(message)\n  }\n}\n\n/**\n * Implements a global exclusive lock using the Navigator LockManager API. It\n * is available on all browsers released after 2022-03-15 with Safari being the\n * last one to release support. If the API is not available, this function will\n * throw. Make sure you check availablility before configuring {@link\n * GoTrueClient}.\n *\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\n * local storage item to `true`.\n *\n * Internals:\n *\n * Since the LockManager API does not preserve stack traces for the async\n * function passed in the `request` method, a trick is used where acquiring the\n * lock releases a previously started promise to run the operation in the `fn`\n * function. The lock waits for that promise to finish (with or without error),\n * while the function will finally wait for the result anyway.\n *\n * @experimental\n *\n * @param name Name of the lock to be acquired.\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\n *                       will time out after so many milliseconds. An error is\n *                       a timeout if it has `isAcquireTimeout` set to true.\n * @param fn The operation to run once the lock is acquired.\n */\nexport async function navigatorLock<R>(\n  name: string,\n  acquireTimeout: number,\n  fn: () => Promise<R>\n): Promise<R> {\n  if (internals.debug) {\n    console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout)\n  }\n\n  let beginOperation: (() => void) | null = null\n  let rejectOperation: ((error: any) => void) | null = null\n  const beginOperationPromise = new Promise<void>((accept, reject) => {\n    beginOperation = accept\n    rejectOperation = reject\n  })\n\n  // this lets us preserve stack traces over the operation, which the\n  // navigator.locks.request function does not preserve well still\n  const result = (async () => {\n    await beginOperationPromise\n\n    if (internals.debug) {\n      console.log('@supabase/gotrue-js: navigatorLock: operation start')\n    }\n\n    try {\n      return await fn()\n    } finally {\n      if (internals.debug) {\n        console.log('@supabase/gotrue-js: navigatorLock: operation end')\n      }\n    }\n  })()\n\n  const abortController = new globalThis.AbortController()\n\n  if (acquireTimeout > 0) {\n    setTimeout(() => {\n      beginOperation = null\n      abortController.abort()\n\n      if (rejectOperation) {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name)\n        }\n\n        if (rejectOperation) {\n          rejectOperation(\n            new NavigatorLockAcquireTimeoutError(\n              `Acquiring an exclusive Navigator LockManager lock \"${name}\" timed out after ${acquireTimeout}ms`\n            )\n          )\n        }\n        beginOperation = null\n        rejectOperation = null\n      }\n    }, acquireTimeout)\n  }\n\n  await globalThis.navigator.locks.request(\n    name,\n    {\n      mode: 'exclusive',\n      ifAvailable: acquireTimeout === 0,\n      signal: abortController.signal,\n    },\n    async (lock) => {\n      if (lock) {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock acquired', name)\n        }\n\n        try {\n          if (beginOperation) {\n            beginOperation()\n            beginOperation = null\n            rejectOperation = null\n            await result\n          }\n        } catch (e: any) {\n          // not important to handle the error here\n        } finally {\n          if (internals.debug) {\n            console.log('@supabase/gotrue-js: navigatorLock released', name)\n          }\n        }\n      } else {\n        if (internals.debug) {\n          console.log('@supabase/gotrue-js: navigatorLock not immediately available', name)\n        }\n\n        // no lock was available because acquireTimeout === 0\n        const timeout: any = new Error(\n          `Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`\n        )\n        timeout.isAcquireTimeout = true\n\n        if (rejectOperation) {\n          rejectOperation(\n            new NavigatorLockAcquireTimeoutError(\n              `Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`\n            )\n          )\n        }\n        beginOperation = null\n        rejectOperation = null\n      }\n    }\n  )\n\n  return await result\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}